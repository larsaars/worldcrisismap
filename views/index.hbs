{{> menu }}

<div class="w3-sidebar w3-bar-block w3-card w3-animate-left" style="display:none" id="mySidebar">
    <button class="w3-bar-item w3-button w3-large"
            onclick="closeSideBar()">Close &times;
    </button>
    <div id="sidebarText"></div>
</div>

<div id="main">
    <div id="map"></div>
</div>


<script>
    let map = new maplibregl.Map({
        container: 'map',
        style: 'https://api.maptiler.com/maps/streets/style.json?key=FmkZcpxnyFTMyvbqcIqk',
        center: [0, 33],
        zoom: 2.2,
    });

    // list of markers for all events for hover functionality
    let markers = [];

    // the passed json data from the server
    const disasterData = {{{ disasterData }}};
    const newsData = {{{ newsData }}};

    // get disaster and news files from the server data
    let disasterFiles = [], newsFiles = [];

    // parse from json because they are passed as strings
    for (const data of disasterData) {
        disasterFiles.push(JSON.parse(data.geojson));
    }

    for (const data of newsData) {
        newsFiles.push(JSON.parse(data.geojson));
    }
    // generate colors for all events
    const [disasterColors, newsColors] = generateRandomColors(disasterData.length, newsData.length);


    map.on('load', async function () {

        let layers = map.getStyle().layers;
        // find the index of the first symbol layer in the map style
        let firstSymbolId;
        for (let i = 0; i < layers.length; i++) {
            if (layers[i].type === 'symbol') {
                firstSymbolId = layers[i].id;
                break;
            }
        }

        // build sources from provided geo json files
        map.addSource('disasters', {
            'type': 'geojson',
            'data': await buildGeoJSON(disasterFiles, disasterColors)
        });
        map.addSource('news', {
            'type': 'geojson',
            'data': await buildGeoJSON(newsFiles, newsColors)
        });

        // add news and disaster layer
        map.addLayer(
                {
                    'id': 'disasters-layer',
                    'type': 'fill',
                    'source': 'disasters',
                    'layout': {},
                    'paint': {
                        'fill-color': ['get', 'fill'],
                        'fill-opacity': 0.4
                    }
                },
                firstSymbolId
        );
        map.addLayer(
                {
                    'id': 'news-layer',
                    'type': 'fill',
                    'source': 'news',
                    'layout': {},
                    'paint': {
                        'fill-color': ['get', 'fill'],
                        'fill-opacity': 0.4
                    }
                },
                firstSymbolId
        );

        // add markers for every event to the map
        function addMarkers(dataList, colors) {
            for (const dataIndex in dataList) {
                const data = dataList[dataIndex];
                // define event type text
                const eventType = data.type ? data.type : 'News';

                // create marker icon
                let markerIcon = document.createElement('div');
                markerIcon.style.width = '32px';
                markerIcon.style.height = '32px';
                markerIcon.style.backgroundSize = 'contain';
                markerIcon.style.backgroundImage = getMarkerImage(eventType, useBlack(colors[dataIndex]));
                markerIcon.style.cursor = 'pointer';
                markerIcon.style.backgroundColor = colors[dataIndex];
                markerIcon.style.borderRadius = '50%';
                markerIcon.style.border = '1px solid ' + colors[dataIndex];
                markerIcon.style.opacity = '0.72'

                // create marker with popup
                let marker = new maplibregl.Marker(markerIcon, {
                    color: colors[dataIndex],
                    draggable: false,
                    anchor: 'center',
                }).setLngLat([data.lon, data.lat])
                        .setPopup(new maplibregl.Popup({
                            anchor: 'center',
                            closeButton: false,
                            closeOnClick: true
                        }).setHTML('<i><small>' + eventType + '</small></i><br><h3>' + data.title + '</h3>'));

                // set description attribute to marker to be used in sidebar text
                marker.description = '<i>' + eventType + '</i><br><h2>' + data.title + '</h2><br>' + data.description_html.replace('&quot;', '"');

                // add to map
                marker.addTo(map);

                // and to the list of markers
                markers.push(marker);

                // add marker mouse enter and leave listener to only show popup on hover
                // get marker div
                const markerDiv = marker.getElement();
                // add mouse enter listener
                markerDiv.addEventListener('mouseenter', () => {
                    marker.togglePopup();
                });
                // add mouse leave listener
                markerDiv.addEventListener('mouseleave', () => {
                    marker.togglePopup();
                });
            }
        }

        // call addMarkers for disaster and news markers
        addMarkers(disasterData, disasterColors);
        addMarkers(newsData, newsColors);
    });


    // add on map click listener
    // for preventing popup from opening on click (only on hover)
    map.on('click', event => {
        const target = event.originalEvent.target;

        // boolean if marker was clicked
        let isMarker = false;

        // find the marker clicked
        for (const marker of markers) {
            // on match
            if (marker.getElement().contains(target)) {
                // disable popup click
                marker.togglePopup();

                //but open sidebar with description
                openSideBar(marker.description);

                // is marker is true
                isMarker = true;

                break;
            }

            // if this was no marker clicked, close sidebar
            if (!isMarker) {
                closeSideBar();
            }
        }
    });
</script>

{{> footer }}